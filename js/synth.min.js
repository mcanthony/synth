/*synth v175*/function checkLoad() {
    if (videoInput.readyState === 4) {
        init();
        animate();
    } else setTimeout(checkLoad, 100);
}

function playAudio(playlistId) {
    audioisplaying = !1;
    audioplayer.pause();
    audioplayer.remove();
    audioplayer = container.appendChild(document.createElement("audio"));
    $("#close_drop").is(".active") ? $("audio").hide() : $("audio").show();
    audioplayer.id = "audio";
    audioplayer.controls = !0;
    audioplayer.src = audio.playlist[playlistId];
    dancer.after(0, function() {
        synthParams.bass = this.getFrequency(140) * 100;
        synthParams.mid = this.getFrequency(210) * 100;
        synthParams.treble = this.getFrequency(460) * 100;
    }).load(audioplayer);
    audioplayer.play();
    dancer.play();
    audioisplaying = !0;
    $("#playlist").children("li").css("background-color", "rgba(10,10,10,0.7)");
    $("#playlist").children("li").eq(playlistId).css("background-color", "rgba(10,10,10,0.9)");
}

function continueAudioPlay() {
    audio.current++;
    var playlist = audio.playlist, length = playlist.length;
    if (audio.current == length) {
        audio.current = 0;
        playAudio(audio.current);
    } else playAudio(audio.current);
}

function continueVideoPlay() {
    videoInput.current++;
    var playlist = video.playlist, length = playlist.length;
    if (videoInput.current == length) {
        videoInput.current = 0;
        playVideo(videoInput.current);
    } else playVideo(videoInput.current);
}

function playVideo(playlistId) {
    videoInput.pause();
    videoisplaying = !1;
    videoInput.src = video.playlist[playlistId];
    videoInput.muted = !0;
    videoInput.play();
    videoisplaying = !0;
    $("#videoplaylist").children("li").css("background-color", "rgba(10,10,10,0.7)");
    $("#videoplaylist").children("li").eq(playlistId).css("background-color", "rgba(10,10,10,0.9)");
}

function toArray(list) {
    return Array.prototype.slice.call(list || [], 0);
}

function errorHandler(err) {
    var msg = "An error occured: ";
    switch (err.code) {
      case FileError.NOT_FOUND_ERR:
        msg += "File or directory not found";
        break;
      case FileError.NOT_READABLE_ERR:
        msg += "File or directory not readable";
        break;
      case FileError.PATH_EXISTS_ERR:
        msg += "File or directory already exists";
        break;
      case FileError.TYPE_MISMATCH_ERR:
        msg += "Invalid filetype";
        break;
      default:
        msg += "Unknown Error";
    }
    console.log(msg);
}

function listAudioResults(entries) {
    var fragment = document.createDocumentFragment();
    entries.forEach(function(entry, i) {
        audio.playlist.push(entry.toURL());
        var li = document.createElement("li"), name = unescape(entry.name), correctName = unescape(entry.name);
        correctName.length > 30 && (correctName = correctName.substring(0, 30));
        li.innerHTML = [ '<a class="track" href="#" data-href="', entry.toURL(), '" data-title="', correctName, '">', correctName, "</a>" ].join("");
        document.getElementById("playlist").insertBefore(li, null);
        var nodeList = Array.prototype.slice.call(document.getElementById("playlist").children), index = nodeList.indexOf(li);
        li.onclick = function() {
            playAudio(index);
            audio.current = index;
            audioplayer.addEventListener("ended", continueAudioPlay, !1);
            $("#close_drop").trigger("click");
        };
    });
    document.querySelector("#playlist").appendChild(fragment);
    $("#drop_zone").css("background", "transparent");
    $("#read_files").fadeOut(1e3);
}

function listVideoResults(entries) {
    var fragment = document.createDocumentFragment();
    entries.forEach(function(entry, i) {
        video.playlist.push(entry.toURL());
        var li = document.createElement("li"), name = unescape(entry.name), correctName = unescape(entry.name);
        correctName.length > 30 && (correctName = correctName.substring(0, 30));
        li.innerHTML = [ '<a class="track" href="#" data-href="', entry.toURL(), '" data-title="', correctName, '">', correctName, "</a>" ].join("");
        document.getElementById("videoplaylist").insertBefore(li, null);
        var nodeList = Array.prototype.slice.call(document.getElementById("videoplaylist").children), index = nodeList.indexOf(li);
        li.onclick = function() {
            playVideo(index + 1);
            videoInput.current = index;
            videoInput.addEventListener("ended", continueVideoPlay, !1);
            $("#close_drop").trigger("click");
        };
    });
    document.querySelector("#playlist").appendChild(fragment);
    $("#video_drop").css("background", "transparent");
    $("#read_video").fadeOut(1e3);
}

function readAudioFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    window.requestFileSystem(window.TEMPORARY, 838860800, function(fs) {
        fs.root.getDirectory("audio", {}, function(dirEntry) {
            var dirReader = dirEntry.createReader(), entries = [], readEntries = function() {
                dirReader.readEntries(function(results) {
                    if (!results.length) listAudioResults(entries.sort()); else {
                        entries = entries.concat(toArray(results));
                        readEntries();
                    }
                }, errorHandler);
            };
            readEntries();
        });
    });
}

function readVideoFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    window.requestFileSystem(window.TEMPORARY, 838860800, function(fs) {
        fs.root.getDirectory("video", {}, function(dirEntry) {
            var dirReader = dirEntry.createReader(), entries = [], readEntries = function() {
                dirReader.readEntries(function(results) {
                    if (!results.length) listVideoResults(entries.sort()); else {
                        entries = entries.concat(toArray(results));
                        readEntries();
                    }
                }, errorHandler);
            };
            readEntries();
        });
    });
}

function handleAudioFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    var files = evt.dataTransfer.files;
    window.requestFileSystem(window.TEMPORARY, 838860800, function(fs) {
        fs.root.getDirectory("audio", {
            create: !0
        }, function(dirEntry) {}, errorHandler);
        for (var i = 0, file; file = files[i]; ++i) (function(f) {
            fs.root.getFile("/audio/" + f.name, {
                create: !0,
                exclusive: !0
            }, function(fileEntry) {
                fileEntry.createWriter(function(fileWriter) {
                    fileWriter.write(f);
                }, errorHandler);
                fileEntry.file(function(file) {
                    var reader = new FileReader;
                    reader.onloadend = function(e) {
                        audio.playlist.push(fileEntry.toURL());
                        var li = document.createElement("li"), name = unescape(fileEntry.name), correctName = unescape(fileEntry.name);
                        correctName.length > 30 && (correctName = correctName.substring(0, 30));
                        li.innerHTML = [ '<a class="track" href="#" data-href="', fileEntry.toURL(), '" data-title="', correctName, '">', correctName, "</a>" ].join("");
                        document.getElementById("playlist").insertBefore(li, null);
                        var nodeList = Array.prototype.slice.call(document.getElementById("playlist").children), index = nodeList.indexOf(li);
                        li.onclick = function() {
                            playAudio(index);
                            $("#close_drop").trigger("click");
                        };
                    };
                    reader.readAsDataURL(file);
                }, errorHandler);
            }, errorHandler);
        })(file);
        $("header").delay(8e3).fadeOut(2e3);
    });
}

function handleVideoFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    var files = evt.dataTransfer.files;
    window.requestFileSystem(window.TEMPORARY, 838860800, function(fs) {
        fs.root.getDirectory("video", {
            create: !0
        }, function(dirEntry) {}, errorHandler);
        for (var i = 0, file; file = files[i]; ++i) (function(f) {
            fs.root.getFile("/video/" + f.name, {
                create: !0,
                exclusive: !0
            }, function(fileEntry) {
                fileEntry.createWriter(function(fileWriter) {
                    fileWriter.write(f);
                }, errorHandler);
                fileEntry.file(function(file) {
                    var reader = new FileReader;
                    reader.onloadend = function(e) {
                        video.playlist.push(fileEntry.toURL());
                        var li = document.createElement("li"), name = unescape(fileEntry.name), correctName = unescape(fileEntry.name);
                        correctName.length > 30 && (correctName = correctName.substring(0, 30));
                        li.innerHTML = [ '<a class="track" href="#" data-href="', fileEntry.toURL(), '" data-title="', correctName, '">', correctName, "</a>" ].join("");
                        document.getElementById("videoplaylist").insertBefore(li, null);
                        var nodeList = Array.prototype.slice.call(document.getElementById("videoplaylist").children), index = nodeList.indexOf(li);
                        li.onclick = function() {
                            playVideo(index);
                            console.log(index);
                            $("#close_drop").trigger("click");
                        };
                    };
                    reader.readAsDataURL(file);
                }, errorHandler);
            }, errorHandler);
        })(file);
        $("header").delay(8e3).fadeOut(2e3);
    });
}

function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = "copy";
}

function init() {
    var light = new THREE.SpotLight(16777215);
    light.position.set(0, 0, 1e3).normalize();
    light.target = mesh;
    light.intensity = 1200;
    light.castShadow = !0;
    scene.add(light);
    var directionalLightFill = new THREE.SpotLight(16777215);
    directionalLightFill.position.set(0, 0, -1e3).normalize();
    directionalLightFill.target = mesh;
    directionalLightFill.intensity = 1200;
    directionalLightFill.castShadow = !0;
    scene.add(directionalLightFill);
    mesh.position.z = scene.position.z;
    scene.add(mesh);
    var pointTo = 0;
    if (Modernizr.getusermedia) {
        $("header h2").text('Click "allow" to start webcam.');
        setTimeout(function() {
            $("header h2").text("Drag and drop up to 1GB of web audio and video to the playlists.");
            setTimeout(function() {
                $("header h2").text("Control the distortion.");
                $("header h2").next("a").text("Watch the video to learn more").attr("href", "http://kineticvideo.co/info/synth-early-alpha-available-now/");
                controls === !1 && $(".close-button").trigger("click");
                setTimeout(function() {
                    $("header h2").text("Audio and mouse control the Synthesizer.");
                    setTimeout(function() {
                        $("header h2").text("Save presets for later.");
                        setTimeout(function() {
                            $("header p,header h2,header h1,header a").fadeOut(2e3);
                        }, 5e3);
                    }, 5e3);
                }, 5e3);
            }, 5e3);
        }, 3e3);
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        navigator.getUserMedia({
            video: !0,
            audio: !1
        }, function(stream) {
            if (navigator.mozGetUserMedia) videoInput.mozSrcObject = stream; else {
                var vendorURL = window.URL || window.webkitURL;
                webcamEnabled = !0;
                synthParams.webcam = !0;
                videoObject = vendorURL.createObjectURL(stream);
                videoInput.src = videoObject;
            }
        }, function(error) {
            prompt.innerHTML = "Unable to capture WebCam. Please reload the page or try with Google Chrome.";
        });
    } else $("header h2").text("Synth requires WebRTC & HTML5 Filesystem. Try it out with Google Chrome.");
    $(".property-name").on("click", function() {
        if ($(this).text() === "Bass") {
            pointer[0] = synthParams.bass;
            pointTo = 0;
            console.log(pointer[0]);
        }
        if ($(this).text() === "Mid") {
            pointer[1] = synthParams.mid;
            pointTo = 1;
            console.log(pointer[1]);
        }
        if ($(this).text() === "Treble") {
            pointer[2] = synthParams.treble;
            pointTo = 2;
            console.log(pointer[2]);
        }
        if ($(this).text() === "Mouse X") {
            pointer[3] = mouseX;
            pointTo = 3;
            console.log(pointer[3]);
        }
        if ($(this).text() === "Mouse Y") {
            pointer[4] = mouseY;
            pointTo = 4;
            console.log(pointer[4]);
        }
        $(this).text() === "Zoom" && (setting[pointTo] = "synthParams.cameraz = pointer[i] * 4");
        $(this).text() === "Camera X" && (setting[pointTo] = "synthParams.camerax = pointer[i] * 2");
        $(this).text() === "Camera Y" && (setting[pointTo] = "synthParams.cameray = pointer[i] * 10");
        $(this).text() === "Displace" && (setting[pointTo] = "synthParams.displace = pointer[i] * 100");
        $(this).text() === "Amplify" && (setting[pointTo] = "synthParams.multiplier = pointer[i] * 100");
        $(this).text() === "Distort X" && (setting[pointTo] = "synthParams.originX = pointer[i] * 100");
        $(this).text() === "Distort Y" && (setting[pointTo] = "synthParams.originY = pointer[i] * 100");
        $(this).text() === "Distort Z" && (setting[pointTo] = "synthParams.originZ = pointer[i]");
        $(this).text() === "Opacity" && (setting[pointTo] = "synthParams.opacity = pointer[i]");
        $(this).text() === "Scale" || $(this).text() === "X Dimension" || $(this).text() === "Y Dimension" || $(this).text() === "Z Dimension" || $(this).text() === "X Segments" || $(this).text() === "Y Segments" || $(this).text() === "Z Segments";
        if (!$(this).hasClass("active")) {
            $(this).addClass("active");
            $(this).parent("div").children(".c").children(".slider").prepend('<div class="cancel" data-pointer="' + pointTo + '"></div>');
        }
        $(this).parent("div").children(".c").children(".slider").children(".cancel").on("click", function() {
            setting[$(this).data("pointer")] = "";
            $(this).parent("li").children("div:first-child").children(".property-name").removeClass("active");
            $(this).remove();
        });
    });
    if (Modernizr.filesystem) {
        $('<div id="close_drop"><p>Close Playlist</p></div>').insertAfter("audio");
        $("#close_drop").on("click", function() {
            $(this).toggleClass("active");
            $("header").fadeOut(8e3);
            if ($(this).is(".active")) {
                $("#drop_zone").hide();
                $("#video_drop").hide();
                $("audio").css("top", "20px");
                $("audio").hide();
                $(this).css("top", "0px");
                $(this).children("p").text("Open Playlist");
            } else if ($(this).not(".active")) {
                $("#drop_zone").show();
                $("#video_drop").show();
                $("audio").show();
                $("audio").css("top", "298px");
                $(this).css("top", "627px");
                $(this).children("p").text("Close Playlist");
            }
        });
    } else $("#close_drop,#video_drop,#drop_zone,audio").hide();
    document.addEventListener("mousemove", onDocumentMouseMove, !1);
    window.addEventListener("resize", onWindowResize, !1);
    keypress.combo("1", function() {
        playVideo(0);
    });
    keypress.combo("2", function() {
        playVideo(1);
    });
    keypress.combo("3", function() {
        playVideo(2);
    });
    keypress.combo("4", function() {
        playVideo(3);
    });
    keypress.combo("5", function() {
        playVideo(4);
    });
    keypress.combo("6", function() {
        playVideo(5);
    });
    keypress.combo("7", function() {
        playVideo(6);
    });
    keypress.combo("8", function() {
        playVideo(7);
    });
    keypress.combo("9", function() {
        playVideo(8);
    });
    keypress.combo("0", function() {
        onToggleWebcam();
    });
    keypress.combo("l", function() {
        videoInput.loop == 0 ? videoInput.loop = !0 : videoInput.loop = !1;
    });
    var mouseView = !0;
    keypress.combo("x", function() {
        $("#close_drop").not(".active") && $("#close_drop").trigger("click");
        $(".close-button").not(".active") && $(".close-button").trigger("click");
    });
    $(".close-button").on("click", function() {
        if (controls === !1) {
            controls = !0;
            $(".close-button").addClass("active");
        } else {
            controls = !1;
            $(".close-button").removeClass("active");
        }
    });
    webcamEnabled === !1 && playVideo(0);
    initComplete = !0;
    animate();
}

function audioChange() {
    if (guiSetup === !0 && audioisplaying === !0) {
        synthParams.bass = this.getFrequency(140) * 100;
        synthParams.mid = this.getFrequency(210) * 100;
        synthParams.treble = this.getFrequency(460) * 100;
    }
}

function onParamsChange() {
    if (guiSetup === !0) {
        mesh.scale.x = mesh.scale.y = parseFloat(synthParams.scale);
        synthParams.mousex = mouseX;
        synthParams.mousey = mouseY;
        camera.position.x = parseFloat(synthParams.camerax);
        camera.position.y = parseFloat(synthParams.cameray);
        camera.position.z = parseFloat(synthParams.cameraz);
        videoMaterial.uniforms.displace.value = synthParams.displace;
        videoMaterial.uniforms.multiplier.value = synthParams.multiplier;
        videoMaterial.uniforms.opacity.value = parseFloat(synthParams.opacity);
        videoMaterial.uniforms.originX.value = parseFloat(synthParams.originX);
        videoMaterial.uniforms.originY.value = parseFloat(synthParams.originY);
        videoMaterial.uniforms.originZ.value = parseFloat(synthParams.originZ);
        effectHue.uniforms.hue.value = synthParams.hue;
        effectHue.uniforms.saturation.value = synthParams.saturation;
        $("#canvas").css("background-color", synthParams.background);
        hex = synthParams.background;
        hex = parseInt(hex.replace("#", "0x"));
        renderer.setClearColor(hex, 1);
        pointer[0] = synthParams.bass;
        pointer[1] = synthParams.mid;
        pointer[2] = synthParams.treble;
        pointer[3] = synthParams.mousex;
        pointer[4] = synthParams.mousey;
        for (var i = 0; i <= 4; i++) eval(setting[i]);
        for (var i in gui.__controllers) gui.__controllers[i].updateDisplay();
    }
}

function meshChange() {
    scene.remove(mesh);
    var shape = synthParams.shape;
    geometry.verticesNeedUpdate = !1;
    geometry.dynamic = !1;
    switch (shape) {
      case "plane":
        geometry = new THREE.PlaneGeometry(360, 180, 360, 180);
        mesh = new THREE.Mesh(geometry, videoMaterial);
        break;
      case "sphere":
        geometry = new THREE.SphereGeometry(360, 360, 360);
        mesh = new THREE.Mesh(geometry, videoMaterial);
        break;
      case "cube":
        geometry = new THREE.CubeGeometry(120, 120, 120, 120, 120, 120);
        mesh = new THREE.Mesh(geometry, videoMaterial);
        break;
      case "cylinder":
        geometry = new THREE.CylinderGeometry(synthParams.scale, synthParams.scale, 240, 360, 240, !1);
        mesh = new THREE.Mesh(geometry, videoMaterial);
        break;
      case "torus":
        geometry = new THREE.TorusGeometry(synthParams.scale, 360, 360, 360);
        mesh = new THREE.Mesh(geometry, videoMaterial);
        break;
      default:
        geometry = new THREE.PlaneGeometry(640, 360, 640, 360);
        mesh = new THREE.Mesh(geometry, videoMaterial);
    }
    geometry.dynamic = !0;
    geometry.verticesNeedUpdate = !0;
    mesh.doubleSided = !0;
    mesh.position.x = mesh.position.y = mesh.position.z = 0;
    mesh.scale.x = mesh.scale.y = synthParams.scale;
    scene.add(mesh);
}

function onToggleWireframe() {
    synthParams.wireframe === !1 && videoMaterial.wireframe === !1 ? videoMaterial.wireframe = !0 : videoMaterial.wireframe = !1;
}

function onToggleWebcam() {
    if (synthParams.webcam === !0) {
        synthParams.webcam = !0;
        videoInput.src = videoObject;
    } else {
        synthParams.webcam = !1;
        videoInput.src = video.nowPlaying;
    }
}

function onWindowResize() {
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
    composer.reset();
}

function onDocumentMouseMove(event) {
    mouseX = event.clientX - windowHalfX;
    mouseY = (event.clientY - windowHalfY) * .3;
}

function animate() {
    requestAnimationFrame(animate);
    render();
}

function render() {
    if (videoInput.readyState === videoInput.HAVE_ENOUGH_DATA) {
        texture && (texture.needsUpdate = !0);
        videoMaterial && (videoMaterial.needsUpdate = !0);
    }
    camera.lookAt(scene.position);
    onParamsChange();
    composer.render();
}

Detector.webgl || Detector.addGetWebGLMessage();

var container, camera, scene, renderer, video, texture, material, mesh, composer, renderModel, effectBloom, effectHue, effectCopy, mouseX = 0, mouseY = 0, windowHalfX = window.innerWidth / 2, windowHalfY = window.innerHeight / 2, videoPlayer = document.getElementById("videoplayer"), videoInput = document.getElementById("video");

videoInput.load();

videoInput.loop = !0;

var canvasInput = document.getElementById("compare"), videoObject, audio = [];

audio.playlist = [];

var audioplayer = document.getElementById("audio"), audioisplaying = !1, video = [];

video.playlist = [];

video.playlist.push("vid/wavves-1280x720-2500kbps.mp4");

var videoisplaying = !1, dancer = new Dancer, dropZone = document.getElementById("drop_zone"), readFiles = document.getElementById("read_files"), dropZoneVideo = document.getElementById("video_drop"), readFilesVideo = document.getElementById("read_video"), initComplete = !1, webcamEnabled = !1, hex, controls = !1;

camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 2e4);

camera.position.z = 3600;

window.URL = window.URL || window.webkitURL;

var gui, pointer = [], setting = [], params = function() {
    this.bass = 0;
    this.mid = 0;
    this.treble = 0;
    this.mousex = mouseX;
    this.mousey = mouseY;
    this.shape = "plane";
    this.wireframe = !1;
    this.camerax = 0;
    this.cameray = -1130;
    this.cameraz = 1680;
    this.scale = 6;
    this.multiplier = 16;
    this.displace = -6;
    this.opacity = .2;
    this.originX = 0;
    this.originY = 0;
    this.originZ = -2e3;
    this.hue = 0;
    this.saturation = .5;
    this.background = "#090000";
    this.webcam = !1;
    pointer.push(this.bass);
    pointer.push(this.mid);
    pointer.push(this.treble);
    pointer.push(this.mousex);
    pointer.push(this.mousey);
    setting.push("");
    setting.push("");
    setting.push("");
    setting.push("");
    setting.push("");
    onParamsChange();
};

container = document.getElementById("canvas");

document.body.appendChild(container);

scene = new THREE.Scene;

texture = new THREE.Texture(videoInput);

texture.minFilter = THREE.LinearFilter;

texture.magFilter = THREE.LinearFilter;

texture.format = THREE.RGBFormat;

texture.generateMipmaps = !0;

videoMaterial = new THREE.ShaderMaterial({
    uniforms: {
        tDiffuse: {
            type: "t",
            value: texture
        },
        multiplier: {
            type: "f",
            value: 66.6
        },
        displace: {
            type: "f",
            value: 33.3
        },
        opacity: {
            type: "f",
            value: 1
        },
        originX: {
            type: "f",
            value: 0
        },
        originY: {
            type: "f",
            value: 0
        },
        originZ: {
            type: "f",
            value: -2e3
        }
    },
    vertexShader: RuttEtraShader.vertexShader,
    fragmentShader: RuttEtraShader.fragmentShader,
    depthWrite: !0,
    depthTest: !0,
    wireframe: !1,
    transparent: !0,
    overdraw: !1
});

videoMaterial.renderToScreen = !0;

videoMaterial.wireframe = !1;

geometry = new THREE.PlaneGeometry(640, 360, 640, 360);

geometry.overdraw = !1;

geometry.dynamic = !0;

geometry.verticesNeedUpdate = !0;

mesh = new THREE.Mesh(geometry, videoMaterial);

mesh.doubleSided = !0;

mesh.position.x = 0;

mesh.position.y = 0;

mesh.visible = !0;

mesh.scale.x = mesh.scale.y = 6;

renderer = new THREE.WebGLRenderer({
    antialias: !0
});

renderer.setSize(window.innerWidth, window.innerHeight);

renderer.autoClear = !1;

container.appendChild(renderer.domElement);

composer = new THREE.EffectComposer(renderer);

renderModel = new THREE.RenderPass(scene, camera);

composer.addPass(renderModel);

effectBloom = new THREE.BloomPass(3.3, 20, 4, 256);

composer.addPass(effectBloom);

effectHue = new THREE.ShaderPass(THREE.HueSaturationShader);

effectHue.renderToScreen = !0;

effectHue.uniforms.hue.value = 0;

effectHue.uniforms.saturation.value = 0;

composer.addPass(effectHue);

var guiSetup = !1, synthParams = new params, guiContainer = document.getElementById("gui_container");

$.getJSON("default.json", function(response) {
    gui = new dat.GUI({
        load: response,
        preset: "Default",
        autoPlace: !1
    });
    gui.remember(synthParams);
    gui.revert();
    var f1 = gui.addFolder("Audio");
    f1.add(synthParams, "bass", 0, 1).step(.01).listen().name("Bass").onChange(audioChange);
    f1.add(synthParams, "mid", 0, 1).step(.01).listen().name("Mid").onChange(audioChange);
    f1.add(synthParams, "treble", 0, 1).step(.01).listen().name("Treble").onChange(audioChange);
    f1.open();
    var f2 = gui.addFolder("Mouse");
    f2.add(synthParams, "mousex", -960, 960).step(1).listen().name("Mouse X").onChange(onParamsChange);
    f2.add(synthParams, "mousey", -540, 540).step(1).listen().name("Mouse Y").onChange(onParamsChange);
    f2.open();
    var f3 = gui.addFolder("Camera");
    f3.add(synthParams, "cameraz", -3600, 3600).step(10).listen().name("Zoom").onChange(onParamsChange);
    f3.add(synthParams, "camerax", -3600, 3600).step(10).listen().name("Camera X").onChange(onParamsChange);
    f3.add(synthParams, "cameray", -3600, 3600).step(10).listen().name("Camera Y").onChange(onParamsChange);
    f3.open();
    var f4 = gui.addFolder("Synthesizer");
    f4.add(synthParams, "displace", -100, 100).step(.1).listen().name("Displace").onChange(onParamsChange);
    f4.add(synthParams, "multiplier", -100, 100).step(.1).name("Amplify").listen().onChange(onParamsChange);
    f4.add(synthParams, "originX", -2e3, 2e3).step(1).listen().name("Distort X").onChange(onParamsChange);
    f4.add(synthParams, "originY", -2e3, 2e3).step(1).listen().name("Distort Y").onChange(onParamsChange);
    f4.add(synthParams, "originZ", -2e3, 2e3).step(1).listen().name("Distort Z").onChange(onParamsChange);
    f4.add(synthParams, "opacity", 0, 1).step(.01).listen().name("Opacity").onChange(onParamsChange);
    f4.add(synthParams, "hue", 0, 360).step(.1).name("Hue").onChange(onParamsChange);
    f4.add(synthParams, "saturation", -1, .87).step(.01).name("Saturation").onChange(onParamsChange);
    f4.addColor(synthParams, "background").name("Background Color").onChange(onParamsChange);
    f4.open();
    var f5 = gui.addFolder("Geometry");
    f5.add(synthParams, "shape", [ "plane", "sphere", "cube", "cylinder", "torus" ]).listen().name("Shape").onChange(meshChange);
    f5.add(synthParams, "scale", .1, 20).step(.1).listen().name("Scale").onChange(onParamsChange);
    f5.add(synthParams, "wireframe").onChange(onToggleWireframe);
    f5.add(synthParams, "webcam").onChange(onToggleWebcam);
    f5.open();
    gui.close();
    guiContainer.appendChild(gui.domElement);
    $(".save-row select").on("change", function() {
        webcamEnabled === !1;
    });
    guiSetup = !0;
});

checkLoad();

window.File && window.FileReader && window.FileList && window.Blob && (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem);

if (Modernizr.filesystem) {
    dropZone.addEventListener("dragover", handleDragOver, !1);
    dropZone.addEventListener("drop", handleAudioFileSelect, !1);
    readFiles.addEventListener("mousedown", readAudioFileSelect, !1);
    dropZoneVideo.addEventListener("dragover", handleDragOver, !1);
    dropZoneVideo.addEventListener("drop", handleVideoFileSelect, !1);
    readFilesVideo.addEventListener("mousedown", readVideoFileSelect, !1);
};