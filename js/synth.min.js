/*synth v185*/var Synth = function() {
    var that = this;
    this.container;
    this.camera;
    this.scene;
    this.renderer;
    this.texture;
    this.material;
    this.mesh;
    this.light;
    this.directionalLightFill;
    this.composer;
    this.renderModel;
    this.effectBloom;
    this.effectHue;
    this.effectCopy;
    this.mouseX = 0;
    this.mouseY = 0;
    this.windowHalfX = window.innerWidth / 2;
    this.windowHalfY = window.innerHeight / 2;
    this.videoPlayer = document.getElementById("videoplayer");
    this.videoInput = document.getElementById("video");
    this.videoInput.current = 0;
    this.canvasInput = document.getElementById("compare");
    this.videoObject;
    this.videoisplaying = !1;
    this.vplaylist = [];
    this.aplaylist = [];
    this.audioInput = document.getElementById("audio");
    this.audioInput.current = 0;
    this.audioisplaying = !1;
    this.dancer = new Dancer;
    this.dropZone = document.getElementById("drop_zone");
    this.readFiles = document.getElementById("read_files");
    this.dropZoneVideo = document.getElementById("video_drop");
    this.readFilesVideo = document.getElementById("read_video");
    this.initComplete = !1;
    this.webcamEnabled = !1;
    this.menusEnabled = !0;
    this.hex = "#090000";
    this.controls = !1;
    this.gui;
    this.pointer = [];
    this.setting = [];
    this.bass = 0;
    this.mid = 0;
    this.treble = 0;
    this.mousex = that.mouseX;
    this.mousey = that.mouseY;
    this.shape = "plane";
    this.wireframe = !1;
    this.camerax = 0;
    this.cameray = -1130;
    this.cameraz = 1680;
    this.scale = 6;
    this.multiplier = 16;
    this.displace = -6;
    this.transparency = .2;
    this.originX = 0;
    this.originY = 0;
    this.originZ = -2e3;
    this.hue = 0;
    this.saturation = .5;
    this.background = "#090000";
    this.webcam = !1;
    this.guiSetup = !1;
    this.f1;
    this.f2;
    this.f3;
    this.f4;
    this.f5;
    this.guiContainer;
    this.pointer.push(this.bass);
    this.pointer.push(this.mid);
    this.pointer.push(this.treble);
    this.pointer.push(this.mousex);
    this.pointer.push(this.mousey);
    this.setting.push("");
    this.setting.push("");
    this.setting.push("");
    this.setting.push("");
    this.setting.push("");
};

Synth.prototype = {
    get displacement() {
        return this.displace;
    },
    set displacement(val) {
        this.displace = val;
    },
    get multiply() {
        return this.multiplier;
    },
    set multiply(val) {
        this.multiplier = val;
    },
    get scaler() {
        return this.scale;
    },
    set scaler(val) {
        this.mesh.scale.x = this.mesh.scale.y = this.scale = parseFloat(val);
    },
    get oX() {
        return this.originX;
    },
    set oX(pos) {
        this.cameraX = parseFloat(pos);
    },
    get oY() {
        return this.originY;
    },
    set oY(pos) {
        this.originY = parseFloat(pos);
    },
    get oZ() {
        return this.originZ;
    },
    set oZ(pos) {
        this.originZ = parseFloat(pos);
    },
    get originPos() {
        return this.originX + "," + this.originY + "," + this.originZ;
    },
    set originPos(pos) {
        var coords = pos.split(",");
        this.originX = parseFloat(coords[0]);
        this.originY = parseFloat(coords[1]);
        this.originZ = parseFloat(coords[2]);
    },
    get camX() {
        return this.camera.position.x;
    },
    set camX(pos) {
        this.camerax = this.camera.position.x = parseFloat(pos);
    },
    get camY() {
        return this.camera.position.y;
    },
    set camY(pos) {
        this.cameray = this.camera.position.y = parseFloat(pos);
    },
    get camZ() {
        return this.camera.position.y;
    },
    set camZ(pos) {
        this.cameraz = this.camera.position.z = parseFloat(pos);
    },
    get cameraPos() {
        return this.camera.position.x + "," + this.camera.position.y + "," + this.camera.position.z;
    },
    set cameraPos(pos) {
        var coords = pos.split(",");
        this.camerax = this.camera.position.x = parseFloat(coords[0]);
        this.cameray = this.camera.position.y = parseFloat(coords[1]);
        this.cameraz = this.camera.position.z = parseFloat(coords[2]);
    },
    get model() {
        return this.shape;
    },
    set model(shape) {
        if (shape === "plane" || shape === "cube" || shape === "torus" || shape === "sphere" || shape === "cylinder") {
            this.shape = shape;
            this.meshChange(shape);
        }
    },
    get color() {
        return this.hue;
    },
    set color(val) {
        this.hue = val;
    },
    get saturate() {
        return this.saturation;
    },
    set saturate(val) {
        this.saturation = val;
    },
    get opacity() {
        return this.transparency;
    },
    set opacity(val) {
        this.transparency = val;
    },
    get bg() {
        return this.hex;
    },
    set bg(val) {
        var that = this;
        this.hex = val;
        console.log(this.hex);
        $("#canvas").css("background-color", that.hex);
        var newhex = parseInt(that.hex.replace("#", "0x"));
        this.renderer.setClearColor(newhex, 1);
    },
    get wire() {
        return this.wireframe;
    },
    set wire(val) {
        if (this.wireframe === !1 && this.videoMaterial.wireframe === !1 && val === !0) {
            this.videoMaterial.wireframe = !0;
            this.wireframe = !0;
        } else {
            this.videoMaterial.wireframe = !1;
            this.wireframe = !1;
        }
    },
    get channel() {
        return this.webcam;
    },
    set channel(val) {
        if (this.webcamEnabled === !1 && val === !0) {
            this.videoInput.src = this.videoObject;
            this.webcamEnabled = !0;
            this.webcam = !0;
        } else {
            this.playVideo(this.currentVideo);
            this.webcamEnabled = !1;
            this.webcam = !1;
        }
    },
    get menu() {
        return this.menusEnabled;
    },
    set menu(val) {
        if (this.menusEnabled === !1 && val === !0) {
            $("#close_drop,.close-button,#topfill").show();
            this.menusEnabled = !0;
        } else {
            $("#close_drop,.close-button,#topfill").hide();
            this.menusEnabled = !1;
        }
    },
    init: function() {
        function onWindowResize() {
            that.camera.aspect = window.innerWidth / window.innerHeight;
            that.camera.updateProjectionMatrix();
            that.renderer.setSize(window.innerWidth, window.innerHeight);
            that.composer.reset();
        }
        function animate() {
            requestAnimationFrame(animate);
            that.render();
        }
        var that = this;
        window.URL = window.URL || window.webkitURL;
        this.container = document.getElementById("canvas");
        document.body.appendChild(that.container);
        this.camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 2e4);
        this.camera.position.z = 3600;
        this.scene = new THREE.Scene;
        this.texture = new THREE.Texture(that.videoInput);
        this.texture.minFilter = THREE.LinearFilter;
        this.texture.magFilter = THREE.LinearFilter;
        this.texture.format = THREE.RGBFormat;
        this.texture.generateMipmaps = !0;
        this.videoMaterial = new THREE.ShaderMaterial({
            uniforms: {
                tDiffuse: {
                    type: "t",
                    value: that.texture
                },
                multiplier: {
                    type: "f",
                    value: 66.6
                },
                displace: {
                    type: "f",
                    value: 33.3
                },
                opacity: {
                    type: "f",
                    value: 1
                },
                originX: {
                    type: "f",
                    value: 0
                },
                originY: {
                    type: "f",
                    value: 0
                },
                originZ: {
                    type: "f",
                    value: -2e3
                }
            },
            vertexShader: RuttEtraShader.vertexShader,
            fragmentShader: RuttEtraShader.fragmentShader,
            depthWrite: !0,
            depthTest: !0,
            wireframe: !1,
            transparent: !0,
            overdraw: !1
        });
        this.videoMaterial.renderToScreen = !0;
        this.videoMaterial.wireframe = !1;
        this.geometry = new THREE.PlaneGeometry(640, 360, 640, 360);
        this.geometry.overdraw = !1;
        this.geometry.dynamic = !0;
        this.geometry.verticesNeedUpdate = !0;
        this.mesh = new THREE.Mesh(that.geometry, that.videoMaterial);
        this.mesh.doubleSided = !0;
        this.mesh.position.x = 0;
        this.mesh.position.y = 0;
        this.mesh.visible = !0;
        this.mesh.scale.x = this.mesh.scale.y = 6;
        this.renderer = new THREE.WebGLRenderer({
            antialias: !0
        });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.autoClear = !1;
        this.container.appendChild(that.renderer.domElement);
        this.composer = new THREE.EffectComposer(that.renderer);
        this.renderModel = new THREE.RenderPass(that.scene, that.camera);
        this.composer.addPass(that.renderModel);
        this.effectBloom = new THREE.BloomPass(3.3, 20, 4, 256);
        this.composer.addPass(that.effectBloom);
        this.effectHue = new THREE.ShaderPass(THREE.HueSaturationShader);
        this.effectHue.renderToScreen = !0;
        this.effectHue.uniforms.hue.value = 0;
        this.effectHue.uniforms.saturation.value = 0;
        this.composer.addPass(that.effectHue);
        this.light = new THREE.SpotLight(16777215);
        this.light.position.set(0, 0, 1e3).normalize();
        this.light.target = this.mesh;
        this.light.intensity = 1200;
        this.light.castShadow = !0;
        this.scene.add(that.light);
        this.directionalLightFill = new THREE.SpotLight(16777215);
        this.directionalLightFill.position.set(0, 0, -1e3).normalize();
        this.directionalLightFill.target = this.mesh;
        this.directionalLightFill.intensity = 1200;
        this.directionalLightFill.castShadow = !0;
        this.scene.add(that.directionalLightFill);
        this.mesh.position.z = this.scene.position.z;
        this.scene.add(that.mesh);
        window.addEventListener("resize", onWindowResize, !1);
        this.initControls();
        this.initWebcam();
        that.initComplete = !0;
        animate();
    },
    initWebcam: function() {
        var that = this;
        if (Modernizr.getusermedia) {
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
            navigator.getUserMedia({
                video: !0,
                audio: !1
            }, function(stream) {
                if (navigator.mozGetUserMedia) that.videoInput.mozSrcObject = stream; else {
                    var vendorURL = window.URL || window.webkitURL;
                    that.webcamEnabled = !0;
                    that.videoObject = vendorURL.createObjectURL(stream);
                    that.videoInput.src = that.videoObject;
                }
            }, function(error) {
                $("header h2").text("Unable to capture WebCam. Please reload the page or try with Google Chrome.");
            });
        } else $("header h2").text("Synth requires WebRTC & HTML5 Filesystem. Try it out with Google Chrome.");
        that.webcamEnabled === !1 && that.playVideo(0);
    },
    initControls: function() {
        function isFloat(n) {
            return n === +n && n !== (n | 0);
        }
        function convertToRange(value, srcRange, dstRange) {
            if (value < srcRange[0] || value > srcRange[1]) return NaN;
            var srcMax = parseFloat(srcRange[1]) - parseFloat(srcRange[0]), dstMax = parseFloat(dstRange[1]) - parseFloat(dstRange[0]), adjValue = parseFloat(value) - parseFloat(srcRange[0]);
            return parseFloat(adjValue) * parseFloat(dstMax) / parseFloat(srcMax) + parseFloat(dstRange[0]);
        }
        function updateValue(obj, val) {
            obj.html(val);
            console.log(val);
        }
        var that = this, value, value2, round, start, end, width, height, control, key1, key2, json;
        $(".xy").draggable({
            containment: "parent",
            start: function() {
                key1 = $(this).data("key1");
                key2 = $(this).data("key2");
                value = $(this).data("value");
                start = $(this).data("start");
                width = $(this).parent(".wrapper").parent(".joystick").width();
                height = $(this).parent(".wrapper").parent(".joystick").height();
                end = $(this).data("end");
            },
            drag: function() {
                control = $(this).position();
                if (control.top < height && control.top > 0) {
                    value = convertToRange(control.top, [ 0, height ], [ start, end ]);
                    json = '{ "' + key1 + '" : ' + value + " }";
                    console.log("that." + key1 + "=" + value + "");
                    eval("that." + key1 + "=" + value + "");
                }
                if (control.left < width && control.left > 0) {
                    value2 = convertToRange(control.left, [ 0, width ], [ start, end ]);
                    json = '{ "' + key2 + '" : ' + value2 + " }";
                    console.log("that." + key2 + "=" + value2 + "");
                    eval("that." + key2 + "=" + value + "");
                }
            },
            stop: function() {
                control = $(this).position();
                if (control.top < height && control.top > 0) {
                    value = convertToRange(control.top, [ 0, height ], [ start, end ]);
                    json = '{ "' + key1 + '" : ' + value + " }";
                    eval("that." + key1 + "=" + value + "");
                }
                if (control.left < width && control.left > 0) {
                    value2 = convertToRange(control.left, [ 0, width ], [ start, end ]);
                    json = '{ "' + key2 + '" : ' + value2 + " }";
                    eval("that." + key2 + "=" + value + "");
                }
            }
        });
        var scale, posX, posY;
        $(".vert").draggable({
            axis: "y",
            containment: "parent",
            start: function() {
                key = $(this).data("key");
                value = $(this).data("value");
                start = $(this).data("start");
                width = $(this).parent(".wrapper").parent(".fader").height() - $(this).height();
                end = $(this).data("end");
            },
            drag: function() {
                control = $(this).position();
                if (control.top < width && control.top >= 0) {
                    value = convertToRange(control.top, [ 0, width ], [ start, end ]);
                    json = '{ "' + key + '" : ' + value + " }";
                    eval("that." + key + "=" + value + "");
                }
            },
            stop: function() {
                control = $(this).position();
                value = convertToRange(control.top, [ 0, width ], [ start, end ]);
                json = '{ "' + key + '" : ' + value + " }";
                eval("that." + key + "=" + value + "");
            }
        });
        $(".hor").draggable({
            axis: "x",
            containment: "parent",
            start: function() {
                key = $(this).data("key");
                value = $(this).data("value");
                start = $(this).data("start");
                width = $(this).parent(".wrapper").parent(".fader").width() - $(this).height();
                end = $(this).data("end");
            },
            drag: function() {
                control = $(this).position();
                if (control.left < width && control.left >= 0) {
                    value = convertToRange(control.left, [ 0, width ], [ start, end ]);
                    json = '{ "' + key + '" : ' + value + " }";
                    eval("that." + key + "=" + value + "");
                }
            },
            stop: function() {
                control = $(this).position();
                if (control.left < width && control.left >= 0) {
                    value = convertToRange(control.left, [ 0, width ], [ start, end ]);
                    json = '{ "' + key + '" : ' + value + " }";
                    eval("that." + key + "=" + value + "");
                }
            }
        });
        if (Modernizr.filesystem) {
            this.dropZone.context = this;
            this.readFiles.context = this;
            this.dropZoneVideo.context = this;
            this.readFilesVideo.context = this;
            this.dropZone.addEventListener("dragover", that.handleDragOver, !1);
            this.dropZone.ondrop = function(evt) {
                that.handleFileSelect(evt, "audio", that);
            };
            this.readFiles.onmousedown = function(evt) {
                that.readFileSelect(evt, "audio");
                $("#read_files").fadeOut(1e3);
            };
            this.dropZoneVideo.addEventListener("dragover", that.handleDragOver, !1);
            this.dropZoneVideo.ondrop = function(evt) {
                that.handleFileSelect(evt, "video", that);
            };
            this.readFilesVideo.onmousedown = function(evt) {
                that.readFileSelect(evt, "video");
                $("#read_video").fadeOut(1e3);
            };
            window.File && window.FileReader && window.FileList && window.Blob && (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem);
            $('<div id="close_drop"><p>Close Playlist</p></div>').insertAfter("audio");
            $("#close_drop").on("click", function() {
                $(this).toggleClass("active");
                $("header").fadeOut(8e3);
                if ($(this).is(".active")) {
                    $("#drop_zone").hide();
                    $("#video_drop").hide();
                    $("audio").css("top", "20px");
                    $("audio").hide();
                    $(this).css("top", "0px");
                    $(this).children("p").text("Open Playlist");
                } else if ($(this).not(".active")) {
                    $("#drop_zone").show();
                    $("#video_drop").show();
                    $("audio").show();
                    $("audio").css("top", "298px");
                    $(this).css("top", "627px");
                    $(this).children("p").text("Close Playlist");
                }
            });
        } else $("#close_drop,#video_drop,#drop_zone,audio").hide();
        document.addEventListener("mousemove", that.onDocumentMouseMove, !1);
        keypress.combo("1", function() {
            that.playVideo(0);
        });
        keypress.combo("2", function() {
            that.playVideo(1);
        });
        keypress.combo("3", function() {
            that.playVideo(2);
        });
        keypress.combo("4", function() {
            that.playVideo(3);
        });
        keypress.combo("5", function() {
            that.playVideo(4);
        });
        keypress.combo("6", function() {
            that.playVideo(5);
        });
        keypress.combo("7", function() {
            that.playVideo(6);
        });
        keypress.combo("8", function() {
            that.playVideo(7);
        });
        keypress.combo("9", function() {
            that.playVideo(8);
        });
        keypress.combo("0", function() {
            that.webcam("true");
        });
        keypress.combo("l", function() {
            that.videoInput.loop == 0 ? that.videoInput.loop = !0 : that.videoInput.loop = !1;
        });
        var mouseView = !0;
        keypress.combo("x", function() {
            if (that.menusEnabled === !0) {
                $("#close_drop").not(".active") && $("#close_drop").trigger("click");
                $(".close-button").not(".active") && $(".close-button").trigger("click");
            }
        });
        keypress.combo("m", function() {});
        $(".close-button").on("click", function() {
            if (that.controls === !1) {
                that.controls = !0;
                $(".close-button").addClass("active");
            } else {
                that.controls = !1;
                $(".close-button").removeClass("active");
            }
        });
    },
    playAudio: function(playlistId) {
        var that = this;
        this.audioisplaying = !1;
        this.audioInput.pause();
        this.audioInput.remove();
        this.audioInput = that.container.appendChild(document.createElement("audio"));
        $("#close_drop").is(".active") ? $("audio").hide() : $("audio").show();
        this.audioInput.id = "audio";
        this.audioInput.controls = !0;
        this.audioInput.src = this.aplaylist[playlistId];
        this.dancer.after(0, function() {
            that.bass = this.getFrequency(140) * 100;
            that.mid = this.getFrequency(210) * 100;
            that.treble = this.getFrequency(460) * 100;
        }).load(that.audioInput);
        this.audioInput.play();
        this.dancer.play();
        this.audioisplaying = !0;
        $("#playlist").children("li").css("background-color", "rgba(10,10,10,0.7)");
        $("#playlist").children("li").eq(playlistId).css("background-color", "rgba(10,10,10,0.9)");
    },
    continueAudioPlay: function(context) {
        var that = context;
        that.audioInput.current++;
        var playlist = that.aplaylist, length = that.aplaylist.length;
        if (that.audioInput.current == length) {
            that.audioInput.current = 0;
            that.playAudio(that.audioInput.current);
        } else that.playAudio(that.audioInput.current);
        console.log(that.audioInput.current);
    },
    continueVideoPlay: function(context) {
        var that = context;
        console.log(that);
        that.videoInput.current++;
        var playlist = that.vplaylist, length = that.vplaylist.length;
        if (that.videoInput.current == length) {
            that.videoInput.current = 0;
            that.playVideo(that.videoInput.current);
        } else that.playVideo(that.videoInput.current);
    },
    playVideo: function(playlistId) {
        this.videoInput.pause();
        this.videoisplaying = !1;
        this.videoInput.src = this.vplaylist[playlistId];
        this.videoInput.muted = !0;
        this.videoInput.play();
        this.videoisplaying = !0;
        $("#videoplaylist").children("li").css("background-color", "rgba(10,10,10,0.7)");
        $("#videoplaylist").children("li").eq(playlistId).css("background-color", "rgba(10,10,10,0.9)");
    },
    toArray: function(list) {
        return Array.prototype.slice.call(list || [], 0);
    },
    errorHandler: function(err) {
        var msg = "An error occured: ";
        switch (err.code) {
          case FileError.NOT_FOUND_ERR:
            msg += "File or directory not found";
            break;
          case FileError.NOT_READABLE_ERR:
            msg += "File or directory not readable";
            break;
          case FileError.PATH_EXISTS_ERR:
            msg += "File or directory already exists";
            break;
          case FileError.TYPE_MISMATCH_ERR:
            msg += "Invalid filetype";
            break;
          default:
            msg += "Unknown Error";
        }
        console.log(msg);
    },
    defaultVideo: function(url) {
        var that = this;
        this.vplaylist.push(url);
        this.videoInput.load();
        this.videoInput.loop = !0;
        var li = document.createElement("li"), name = "waves.mp4", correctName = "waves.mp4";
        correctName.length > 30 && (correctName = correctName.substring(0, 30));
        li.innerHTML = [ '<a class="track" href="#" data-href="', url, '" data-title="', correctName, '">', correctName, "</a>" ].join("");
        document.getElementById("videoplaylist").insertBefore(li, null);
        var nodeList = Array.prototype.slice.call(document.getElementById("videoplaylist").children), index = nodeList.indexOf(0);
        li.onclick = function() {
            that.videoInput.current = 0;
            that.playVideo(0);
            that.videoInput.addEventListener("ended", that.continueVideoPlay, !1);
            $("#close_drop").trigger("click");
        };
    },
    listResults: function(entries, type, context) {
        function entryClickListener(index) {
            if (type === "video") {
                context.playVideo(index);
                context.videoInput.onended = function() {
                    context.continueVideoPlay(context);
                };
            }
            if (type === "audio") {
                context.playAudio(index);
                context.audioInput.onended = function() {
                    context.continueAudioPlay(context);
                };
            }
            $("#close_drop").trigger("click");
        }
        function entryListener(entry, playlist) {
            playlist.push(entry.toURL());
            console.log(playlist);
        }
        var fragment = document.createDocumentFragment(), that = context;
        entries.forEach(function(entry, i) {
            var li = document.createElement("li"), name = unescape(entry.name), correctName = unescape(entry.name);
            correctName.length > 30 && (correctName = correctName.substring(0, 30));
            li.innerHTML = [ '<a class="track" href="#" data-href="', entry.toURL(), '" data-title="', correctName, '">', correctName, "</a>" ].join("");
            if (type === "video") {
                entryListener(entry, context.vplaylist);
                document.getElementById("videoplaylist").insertBefore(li, null);
                var nodeList = Array.prototype.slice.call(document.getElementById("videoplaylist").children);
            }
            if (type === "audio") {
                entryListener(entry, context.aplaylist);
                document.getElementById("playlist").insertBefore(li, null);
                var nodeList = Array.prototype.slice.call(document.getElementById("playlist").children);
            }
            var index = nodeList.indexOf(li);
            li.onclick = function() {
                entryClickListener(index);
            };
        });
        type === "video" && document.querySelector("#videoplaylist").appendChild(fragment);
        type === "audio" && document.querySelector("#playlist").appendChild(fragment);
    },
    readFileSelect: function(evt, type) {
        evt.stopPropagation();
        evt.preventDefault();
        var that = evt.target.context;
        window.requestFileSystem(window.TEMPORARY, 838860800, function(fs) {
            fs.root.getDirectory(type, {}, function(dirEntry) {
                var dirReader = dirEntry.createReader(), entries = [], readEntries = function() {
                    dirReader.readEntries(function(results) {
                        if (!results.length) that.listResults(entries.sort(), type, evt.target.context); else {
                            entries = entries.concat(evt.target.context.toArray(results));
                            readEntries();
                        }
                    }, evt.target.context.errorHandler);
                };
                readEntries();
            });
        });
    },
    handleFileSelect: function(evt, type, context) {
        function loadEndHandler(context, fileEntry) {
            type === "video" && that.vplaylist.push(fileEntry.toURL());
            type === "audio" && that.aplaylist.push(fileEntry.toURL());
            that.readFileSelect(evt, type);
        }
        evt.stopPropagation();
        evt.preventDefault();
        var that = context, files = evt.dataTransfer.files;
        window.requestFileSystem(window.TEMPORARY, 838860800, function(fs) {
            fs.root.getDirectory(type, {
                create: !0
            }, function(dirEntry) {}, that.errorHandler);
            for (var i = 0, file; file = files[i]; ++i) (function(f) {
                fs.root.getFile("/" + type + "/" + f.name, {
                    create: !0,
                    exclusive: !0
                }, function(fileEntry) {
                    fileEntry.createWriter(function(fileWriter) {
                        fileWriter.write(f);
                    }, that.errorHandler);
                    fileEntry.file(function(file) {
                        var reader = new FileReader;
                        reader.onloadend = function(e) {
                            loadEndHandler(context, fileEntry);
                            var li = document.createElement("li"), name = unescape(fileEntry.name), correctName = unescape(fileEntry.name);
                            correctName.length > 30 && (correctName = correctName.substring(0, 30));
                            li.innerHTML = [ '<a class="track" href="#" data-href="', fileEntry.toURL(), '" data-title="', correctName, '">', correctName, "</a>" ].join("");
                            if (type === "video") {
                                document.getElementById("videoplaylist").insertBefore(li, null);
                                var nodeList = Array.prototype.slice.call(document.getElementById("videoplaylist").children), index = nodeList.indexOf(li);
                                li.onclick = function() {
                                    that.playVideo(index);
                                    $("#close_drop").trigger("click");
                                };
                            }
                            if (type === "audio") {
                                document.getElementById("playlist").insertBefore(li, null);
                                var nodeList = Array.prototype.slice.call(document.getElementById("playlist").children), index = nodeList.indexOf(li);
                                li.onclick = function() {
                                    that.playAudio(index);
                                    $("#close_drop").trigger("click");
                                };
                            }
                        };
                        reader.readAsDataURL(file);
                    }, that.errorHandler);
                }, that.errorHandler);
            })(file);
            $("header h2").text("Change controls to achieve stunning new looks.");
            $("header").delay(8e3).fadeOut(2e3);
        });
    },
    handleDragOver: function(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        evt.dataTransfer.dropEffect = "copy";
    },
    audioChange: function() {
        if (this.audioisplaying === !0) {
            this.bass = this.getFrequency(140) * 100;
            this.mid = this.getFrequency(210) * 100;
            this.treble = this.getFrequency(460) * 100;
        }
    },
    paramsChange: function() {
        var that = this;
        that.mesh.scale.x = that.mesh.scale.y = parseFloat(that.scale);
        that.mousex = that.mouseX;
        that.mousey = that.mouseY;
        that.camera.position.x = parseFloat(that.camerax);
        that.camera.position.y = parseFloat(that.cameray);
        that.camera.position.z = parseFloat(that.cameraz);
        that.videoMaterial.uniforms.displace.value = that.displace;
        that.videoMaterial.uniforms.multiplier.value = that.multiplier;
        that.videoMaterial.uniforms.opacity.value = parseFloat(that.transparency);
        that.videoMaterial.uniforms.originX.value = parseFloat(that.originX);
        that.videoMaterial.uniforms.originY.value = parseFloat(that.originY);
        that.videoMaterial.uniforms.originZ.value = parseFloat(that.originZ);
        that.effectHue.uniforms.hue.value = that.hue;
        that.effectHue.uniforms.saturation.value = that.saturation;
        $("#canvas").css("background-color", that.hex);
        var newhex = parseInt(that.hex.replace("#", "0x"));
        that.renderer.setClearColor(newhex, 1);
        that.pointer[0] = that.bass;
        that.pointer[1] = that.mid;
        that.pointer[2] = that.treble;
        that.pointer[3] = that.mousex;
        that.pointer[4] = that.mousey;
        for (var i = 0; i <= 4; i++) eval(that.setting[i]);
    },
    meshChange: function(shape) {
        var that = this;
        that.scene.remove(that.mesh);
        that.shape = shape;
        that.geometry.verticesNeedUpdate = !1;
        that.geometry.dynamic = !1;
        console.log(shape);
        switch (shape) {
          case "plane":
            that.geometry = new THREE.PlaneGeometry(360, 180, 360, 180);
            that.mesh = new THREE.Mesh(that.geometry, that.videoMaterial);
            break;
          case "sphere":
            that.geometry = new THREE.SphereGeometry(360, 360, 360);
            that.mesh = new THREE.Mesh(that.geometry, that.videoMaterial);
            break;
          case "cube":
            that.geometry = new THREE.CubeGeometry(120, 120, 120, 120, 120, 120);
            that.mesh = new THREE.Mesh(that.geometry, that.videoMaterial);
            break;
          case "cylinder":
            that.geometry = new THREE.CylinderGeometry(that.scale, that.scale, 240, 360, 240, !1);
            that.mesh = new THREE.Mesh(that.geometry, that.videoMaterial);
            break;
          case "torus":
            that.geometry = new THREE.TorusGeometry(that.scale, 360, 360, 360);
            that.mesh = new THREE.Mesh(that.geometry, that.videoMaterial);
            break;
          default:
            that.geometry = new THREE.PlaneGeometry(640, 360, 640, 360);
            that.mesh = new THREE.Mesh(that.geometry, that.videoMaterial);
        }
        that.geometry.dynamic = !0;
        that.geometry.verticesNeedUpdate = !0;
        that.mesh.doubleSided = !0;
        that.mesh.position.x = that.mesh.position.y = that.mesh.position.z = 0;
        that.mesh.scale.x = that.mesh.scale.y = that.scale;
        that.shape = shape;
        that.scene.add(that.mesh);
    },
    onDocumentMouseMove: function(event) {
        this.mouseX = event.clientX - this.windowHalfX;
        this.mouseY = (event.clientY - this.windowHalfY) * .3;
    },
    render: function() {
        var that = this;
        if (this.videoInput.readyState === this.videoInput.HAVE_ENOUGH_DATA) {
            this.texture && (this.texture.needsUpdate = !0);
            this.videoMaterial && (this.videoMaterial.needsUpdate = !0);
        }
        this.camera.lookAt(that.scene.position);
        this.paramsChange();
        this.composer.render();
    }
};