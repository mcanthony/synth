function errorHandler(err) {
    var msg = "An error occured: ";
    switch (err.code) {
      case FileError.NOT_FOUND_ERR:
        msg += "File or directory not found";
        break;
      case FileError.NOT_READABLE_ERR:
        msg += "File or directory not readable";
        break;
      case FileError.PATH_EXISTS_ERR:
        msg += "File or directory already exists";
        break;
      case FileError.TYPE_MISMATCH_ERR:
        msg += "Invalid filetype";
        break;
      default:
        msg += "Unknown Error";
    }
    console.log(msg);
}

function playAudio(playlistId) {
    audioisplaying = !1;
    dancer = new Dancer;
    audio.nowPlaying = document.getElementById("audio");
    audio.nowPlaying.src = audio.playlist[playlistId];
    dancer.after(0, function() {
        ruttEtraParams.bass = this.getFrequency(140) * 100;
        ruttEtraParams.mid = this.getFrequency(210) * 100;
        ruttEtraParams.treble = this.getFrequency(460) * 100;
    }).load(audio.nowPlaying);
    dancer.play();
    audioisplaying = !0;
}

function toArray(list) {
    return Array.prototype.slice.call(list || [], 0);
}

function listResults(entries) {
    var fragment = document.createDocumentFragment();
    entries.forEach(function(entry, i) {
        audio.playlist.push(entry.toURL());
        var li = document.createElement("li"), name = unescape(entry.name), correctName = unescape(entry.name);
        correctName.length > 30 && (correctName = correctName.substring(0, 30));
        li.innerHTML = [ '<a class="track" href="#" data-href="', entry.toURL(), '" data-title="', correctName, '">', correctName, "</a>" ].join("");
        document.getElementById("playlist").insertBefore(li, null);
        var nodeList = Array.prototype.slice.call(document.getElementById("playlist").children), index = nodeList.indexOf(li);
        li.onclick = function() {
            playAudio(index);
            $("#close_drop").trigger("click");
        };
    });
    document.querySelector("#playlist").appendChild(fragment);
    $("#read_files").fadeOut(1e3);
}

function readFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    window.requestFileSystem(window.TEMPORARY, 838860800, function(fs) {
        var dirReader = fs.root.createReader(), entries = [], readEntries = function() {
            dirReader.readEntries(function(results) {
                if (!results.length) listResults(entries.sort()); else {
                    entries = entries.concat(toArray(results));
                    readEntries();
                }
            }, errorHandler);
        };
        readEntries();
    });
}

function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    var files = evt.dataTransfer.files;
    window.requestFileSystem(window.TEMPORARY, 838860800, function(fs) {
        for (var i = 0, file; file = files[i]; ++i) (function(f) {
            fs.root.getFile(f.name, {
                create: !0,
                exclusive: !0
            }, function(fileEntry) {
                fileEntry.createWriter(function(fileWriter) {
                    fileWriter.write(f);
                }, errorHandler);
                fileEntry.file(function(file) {
                    var reader = new FileReader;
                    reader.onloadend = function(e) {
                        audio.playlist.push(fileEntry.toURL());
                        var li = document.createElement("li"), name = unescape(fileEntry.name), correctName = unescape(fileEntry.name);
                        correctName.length > 30 && (correctName = correctName.substring(0, 30));
                        li.innerHTML = [ '<a class="track" href="#" data-href="', fileEntry.toURL(), '" data-title="', correctName, '">', correctName, "</a>" ].join("");
                        document.getElementById("playlist").insertBefore(li, null);
                        var nodeList = Array.prototype.slice.call(document.getElementById("playlist").children), index = nodeList.indexOf(li);
                        li.onclick = function() {
                            playAudio(index);
                            $("#close_drop").trigger("click");
                        };
                    };
                    reader.readAsDataURL(file);
                }, errorHandler);
            }, errorHandler);
        })(file);
        $("header h2").text("Change controls to achieve stunning new looks.");
        $("header").delay(8e3).fadeOut(2e3);
        $("#drop_zone").css("background", "transparent");
        $("#read_files").fadeOut(1e3);
    });
}

function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = "copy";
}

function init() {
    function resetSetting(elem, count) {}
    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 1e4);
    camera.position.z = 3600;
    var light = new THREE.DirectionalLight(16777215);
    light.position.set(1, 1, 1).normalize();
    scene.add(light);
    var directionalLightFill = new THREE.DirectionalLight(16777215);
    directionalLightFill.position.set(-1, 1, 2).normalize();
    scene.add(directionalLightFill);
    renderer = new THREE.WebGLRenderer({
        antialias: !0
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);
    mesh.position.z = scene.position.z;
    scene.add(mesh);
    renderer.autoClear = !1;
    document.addEventListener("mousemove", onDocumentMouseMove, !1);
    var renderModel = new THREE.RenderPass(scene, camera), effectBloom = new THREE.BloomPass(1.4), effectCopy = new THREE.ShaderPass(THREE.CopyShader);
    effectCopy.renderToScreen = !0;
    composer = new THREE.EffectComposer(renderer);
    composer.addPass(renderModel);
    composer.addPass(effectBloom);
    composer.addPass(effectCopy);
    navigator.getUserMedia || (navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia);
    window.addEventListener("resize", onWindowResize, !1);
    document.addEventListener("headtrackrStatus", function(event) {
        event.status == "detecting";
        event.status == "found";
    });
    var timeoutId = 0;
    $(".property-name").mousedown(function() {
        if ($(this).not(".active")) {
            pointerCount > 2 && (pointerCount = 0);
            $(this).addClass("active");
            if ($(this).text() === "Bass") {
                pointer[pointerCount] = ruttEtraParams.bass;
                console.log(pointer[pointerCount]);
                return;
            }
            if ($(this).text() === "Mid") {
                pointer[pointerCount] = ruttEtraParams.mid;
                console.log(pointer);
                return;
            }
            if ($(this).text() === "Treble") {
                pointer[pointerCount] = ruttEtraParams.treble;
                console.log(pointer[pointerCount]);
                return;
            }
            if ($(this).text() === "Zoom") return;
            if ($(this).text() === "Camera X") return;
            if ($(this).text() === "Camera Y") return;
            $(this).text() === "Displace" && (setting[pointerCount] = "ruttEtraParams.displace = pointer[i] * 100");
            $(this).text() === "Amplify" && (setting[pointerCount] = "ruttEtraParams.multiplier = pointer[i] * 100");
            $(this).text() === "Distort X" && (setting[pointerCount] = "ruttEtraParams.originX = pointer[i] * 100");
            $(this).text() === "Distort Y" && (setting[pointerCount] = "ruttEtraParams.originY = pointer[i] * 100");
            $(this).text() === "Distort Z" && (setting[pointerCount] = "ruttEtraParams.originZ = pointer[i] * 100");
            $(this).text() === "Opacity" && (setting[pointerCount] = "ruttEtraParams.opacity = pointer[i]");
            if ($(this).text() === "Scale" || $(this).text() === "X Dimension" || $(this).text() === "Y Dimension" || $(this).text() === "Z Dimension" || $(this).text() === "X Segments" || $(this).text() === "Y Segments" || $(this).text() === "Z Segments") return;
            $(this).parent("div").children(".c").children(".slider").prepend('<div class="cancel"></div>');
            $(this).parent("div").children(".c").children(".slider").children(".cancel").on("click", function() {
                var command = setting[pointerCount];
                for (i = 0; i <= 3; i++) if (setting[i] = command) setting[i] = "";
                $(this).parent("li").children("div:first-child").children(".property-name").removeClass("active");
                $(this).remove();
            });
            pointerCount++;
        }
    });
    $('<div id="close_drop"><p>Close Playlist</p></div>').insertAfter("audio");
    $("#close_drop").on("click", function() {
        $(this).toggleClass("active");
        $("header").fadeOut(8e3);
        if ($(this).is(".active")) {
            $("#drop_zone").hide();
            $("audio").css("top", "20px");
            $("audio").hide();
            $(this).css("top", "0px");
            $(this).children("p").text("Open Playlist");
        } else if ($(this).not(".active")) {
            $("#drop_zone").show();
            $("audio").show();
            $("audio").css("top", "298px");
            $(this).css("top", "326px");
            $(this).children("p").text("Close Playlist");
        }
    });
}

function bgColorChange() {}

function moveCamera() {
    camera.position.x = ruttEtraParams.camerax;
    camera.position.y = ruttEtraParams.cameray;
    camera.position.z = ruttEtraParams.cameraz;
}

function audioChange() {
    ruttEtraParams.bass = this.getFrequency(140) * 100;
    ruttEtraParams.mid = this.getFrequency(210) * 100;
    ruttEtraParams.treble = this.getFrequency(460) * 100;
}

function onParamsChange() {
    if (audioisplaying === !0) {
        pointer[0] = ruttEtraParams.bass;
        pointer[1] = ruttEtraParams.mid;
        pointer[2] = ruttEtraParams.treble;
        for (var i = 0; i <= 2; i++) eval(setting[i]);
    }
    videoMaterial.uniforms.displace.value = ruttEtraParams.displace;
    videoMaterial.uniforms.multiplier.value = ruttEtraParams.multiplier;
    videoMaterial.uniforms.opacity.value = ruttEtraParams.opacity;
    videoMaterial.uniforms.originX.value = ruttEtraParams.originX;
    videoMaterial.uniforms.originY.value = ruttEtraParams.originY;
    videoMaterial.uniforms.originZ.value = ruttEtraParams.originZ;
}

function meshChange(geo) {
    newMesh(ruttEtraParams.shape, ruttEtraParams.dimX, ruttEtraParams.dimY, ruttEtraParams.dimZ, ruttEtraParams.segX, ruttEtraParams.segY, ruttEtraParams.segZ, ruttEtraParams.scale);
}

function newMesh(geo, sizeX, sizeY, sizeZ, segX, segY, segZ, scale) {
    scene.remove(mesh);
    geo === "plane" ? geometry = new THREE.PlaneGeometry(sizeX, sizeY, segX, segY) : geo === "sphere" ? geometry = new THREE.SphereGeometry(sizeX, segX, segY) : geo === "cube" ? geometry = new THREE.CubeGeometry(sizeX, sizeY, sizeZ, segX, segY, segZ) : geo === "torus" && (geometry = new THREE.TorusKnotGeometry(sizeX, sizeY, segX, segY, sizeZ, segZ, scale));
    drawNewMesh(geometry);
}

function drawNewMesh(geometry) {
    geometry.overdraw = !1;
    geometry.dynamic = !0;
    geometry.verticesNeedUpdate = !0;
    mesh = new THREE.Mesh(geometry, videoMaterial);
    mesh.position.x = 0;
    mesh.position.y = 0;
    mesh.position.z = scene.position.z;
    mesh.visible = !0;
    mesh.scale.x = mesh.scale.y = ruttEtraParams.scale;
    scene.add(mesh);
}

function onToggleWireframe() {
    videoMaterial.wireframe === !1 ? videoMaterial.wireframe = !0 : videoMaterial.wireframe = !1;
}

function onWindowResize() {
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
    composer.reset();
}

function onDocumentMouseMove(event) {
    mouseX = event.clientX - windowHalfX;
    mouseY = (event.clientY - windowHalfY) * .3;
}

function animate() {
    requestAnimationFrame(animate);
    render();
}

function render() {
    camera.lookAt(scene.position);
    if (videoInput.readyState === videoInput.HAVE_ENOUGH_DATA) {
        texture && (texture.needsUpdate = !0);
        videoMaterial && (videoMaterial.needsUpdate = !0);
    }
    onParamsChange();
    for (var i in gui.__controllers) gui.__controllers[i].updateDisplay();
    renderer.clear();
    composer.render();
}

var hasGetUserMedia = function() {
    return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia);
}();

hasGetUserMedia ? $("header h2").text('Click "allow" at top of screen to start video.') : $("header h2").text("Synth requires WebRTC webcam support. Try it out with Google Chrome.");

Detector.webgl || Detector.addGetWebGLMessage();

var container, camera, scene, renderer, video, texture, material, mesh, composer, mouseX = 0, mouseY = 0, windowHalfX = window.innerWidth / 2, windowHalfY = window.innerHeight / 2, videoInput = document.getElementById("video"), canvasInput = document.getElementById("compare");

window.URL = window.URL || window.webkitURL;

navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

navigator.getUserMedia({
    video: !0
}, function(stream) {
    videoInput.src = window.URL.createObjectURL(stream);
    $("header h2").text("Drag and Drop up to 1GB of MP3 to the Playlist.");
    $("header p").delay(1e3).fadeOut(2e3);
}, function(error) {
    prompt.innerHTML = "Unable to capture WebCam. Please reload the page.";
});

var gui, ruttEtraParams = {
    bass: 0,
    mid: 0,
    treble: 0,
    shape: null,
    dimX: 100,
    dimY: 100,
    dimZ: 100,
    segX: 100,
    segY: 100,
    segZ: 100,
    wireframe: !1,
    camerax: 0,
    cameray: 0,
    cameraz: 3600,
    scale: 1,
    multiplier: 66.6,
    displace: 33.3,
    opacity: 1,
    originX: 0,
    originY: 0,
    originZ: -2e3
}, dancer, pointer = [];

pointer.push(ruttEtraParams.bass);

pointer.push(ruttEtraParams.mid);

pointer.push(ruttEtraParams.treble);

var setting = [];

setting.push("");

setting.push("");

setting.push("");

var pointerCount = 0;

container = document.createElement("div");

document.body.appendChild(container);

container = document.createElement("div");

document.body.appendChild(container);

scene = new THREE.Scene;

texture = new THREE.Texture(videoInput);

texture.minFilter = THREE.LinearFilter;

texture.magFilter = THREE.LinearFilter;

texture.format = THREE.RGBFormat;

texture.generateMipmaps = !0;

videoMaterial = new THREE.ShaderMaterial({
    uniforms: {
        tDiffuse: {
            type: "t",
            value: texture
        },
        multiplier: {
            type: "f",
            value: 66.6
        },
        displace: {
            type: "f",
            value: 33.3
        },
        opacity: {
            type: "f",
            value: 1
        },
        originX: {
            type: "f",
            value: 0
        },
        originY: {
            type: "f",
            value: 0
        },
        originZ: {
            type: "f",
            value: -2e3
        }
    },
    vertexShader: RuttEtraShader.vertexShader,
    fragmentShader: RuttEtraShader.fragmentShader,
    depthWrite: !0,
    depthTest: !0,
    wireframe: !1,
    transparent: !0,
    overdraw: !1
});

videoMaterial.renderToScreen = !0;

geometry = new THREE.PlaneGeometry(720, 480, 720, 480);

geometry.overdraw = !1;

geometry.dynamic = !0;

geometry.verticesNeedUpdate = !0;

mesh = new THREE.Mesh(geometry, videoMaterial);

mesh.position.x = 0;

mesh.position.y = 0;

mesh.visible = !0;

mesh.scale.x = mesh.scale.y = 16;

gui = new dat.GUI({
    autoPlace: !1
});

var guiContainer = document.getElementById("gui_container");

guiContainer.appendChild(gui.domElement);

gui.remember(ruttEtraParams);

var f1 = gui.addFolder("Audio");

f1.add(ruttEtraParams, "bass", 0, 1).step(.01).listen().name("Bass").onChange(audioChange);

f1.add(ruttEtraParams, "mid", 0, 1).step(.01).listen().name("Mid").onChange(audioChange);

f1.add(ruttEtraParams, "treble", 0, 1).step(.01).listen().name("Treble").onChange(audioChange);

f1.open();

var f2 = gui.addFolder("Camera");

f2.add(ruttEtraParams, "cameraz", -6e3, 6e3).step(100).listen().name("Zoom").onChange(moveCamera);

f2.add(ruttEtraParams, "camerax", -720, 720).step(1).listen().name("Camera X").onChange(moveCamera);

f2.add(ruttEtraParams, "cameray", -720, 720).step(1).listen().name("Camera Y").onChange(moveCamera);

f2.open();

var f3 = gui.addFolder("Synthesizer");

f3.add(ruttEtraParams, "displace", -100, 100).step(.1).listen().name("Displace").onChange(onParamsChange);

f3.add(ruttEtraParams, "multiplier", -100, 100).step(.1).name("Amplify").listen().onChange(onParamsChange);

f3.add(ruttEtraParams, "originX", -2e3, 2e3).step(100).listen().name("Distort X").onChange(onParamsChange);

f3.add(ruttEtraParams, "originY", -2e3, 2e3).step(100).listen().name("Distort Y").onChange(onParamsChange);

f3.add(ruttEtraParams, "originZ", -2e3, 2e3).step(100).listen().name("Distort Z").onChange(onParamsChange);

f3.add(ruttEtraParams, "opacity", 0, 1).step(.01).listen().name("Opacity").onChange(onParamsChange);

f3.open();

var f4 = gui.addFolder("Geometry");

f4.add(ruttEtraParams, "shape", [ "plane", "sphere", "cube", "torus" ]).listen().name("Shape").onChange(meshChange);

f4.add(ruttEtraParams, "scale", .1, 10).step(1).listen().name("Scale");

f4.add(ruttEtraParams, "dimX", 1, 720).step(1).listen().name("X Dimension");

f4.add(ruttEtraParams, "dimY", 1, 720).step(1).listen().name("Y Dimension");

f4.add(ruttEtraParams, "dimZ", 1, 720).step(1).listen().name("Z Dimension");

f4.add(ruttEtraParams, "segX", 1, 720).step(1).listen().name("X Segments");

f4.add(ruttEtraParams, "segY", 1, 720).step(1).listen().name("Y Segments");

f4.add(ruttEtraParams, "segZ", 1, 720).step(1).listen().name("Z Segments");

f4.add(ruttEtraParams, "wireframe").onChange(onToggleWireframe);

f4.open();

gui.close();

onParamsChange();

init();

animate();

var audio = [];

audio.playlist = [];

var audioisplaying = !1;

window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;

var dropZone = document.getElementById("drop_zone");

dropZone.addEventListener("dragover", handleDragOver, !1);

dropZone.addEventListener("drop", handleFileSelect, !1);

var readFiles = document.getElementById("read_files");

readFiles.addEventListener("mousedown", readFileSelect, !1);

var count = 0;